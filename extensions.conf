[general]
static = yes
writeprotect = no
clearglobalvars = yes

; This context holds the various ways of getting to conference rooms.
[Conferences]

; This is the conference manager that can be used to lock, unlock, or
; terminate a conference.
exten => 210,1,Gosub(Authenticate,s,1(2016))	; Authenticate.
 same => n,Mset(C=conference&ha/room&digits/2,E=adacore/not-exist)
 same => n,Mset(STATS_INC(conf_mgr)=1,__G=conf_op) ; Count the usage.
 same => n(r),Macro(Get-Speech,${G},${EFN}adacore/conf_mgr,2,10,100,w)
 same => n,GotoIf(${S_T}?${S_T},1:r)		; Retry or do action.

exten => _[lLK]20Z,1,GotoIf(${CONFBRIDGE_INFO(parties,20${EXTEN:-1})}?:err)
exten => _L20Z,n,Mset(V=lock,T=locked,E=is&adacore/already-locked)
exten => _l20Z,s,Mset(V=unlock,T=unlocked,E=is&adacore/already-unlocked)
exten => _K20Z,s,Mset(V=terminate,T=terminated) ; To terminate.
exten => _[lLK]20Z,n,Set(CFN=adacore/you-want-to&adacore/${V}&${C}&digits/${EXTEN:-2:1}&digits/${EXTEN:-1}&)
exten => _[lLK]20Z,n,Gosub(Is-That-Correct,s,1) ; ... and see if correct.
exten => _[lLK]20Z,n,GotoIf($[${GOSUB_RETVAL}=2]?210,r) ; Retry it not.
exten => _L20Z,s,GotoIf(${CONFBRIDGE_INFO(locked,20${EXTEN:-1})}?err) ; Bad.
exten => _l20Z,s,GotoIf(${CONFBRIDGE_INFO(locked,20${EXTEN:-1})}?:err) ; Bad.
exten => _K20Z,s,NoOp		; No test needed for termination.
exten => _[lLK]20Z,n,AGI(confbridge_op.php,${EXTEN:-3},${EXTEN:0:1})
exten => _[lLK]20Z,n,Set(EFN=${C}&digits/${EXTEN:-2:1}&digits/${EXTEN:-1}&is&now&adacore/${T}&)
exten => _[lLK]20Z,n,Goto(210,r)	; Ask for another operation.

exten => _[lLK]20Z,n(err),Set(EFN=im-sorry&${C}&digits/${EXTEN:-2:1}&digits/${EXTEN:-1}&${E}&)
exten => _[lLK]20Z,n,Goto(210,r)	; See if another operation is wanted.

exten => _s20Z,1,Goto(s20${EXTEN:-1}${CONFBRIDGE_INFO(parties,${EXTEN:-3})},1)
exten => _s20Z.,1,Playback(${C}&digits/${EXTEN:3:1}) ; Say that conf ...
exten => _s20Z0,n,Playback(adacore/not-exist)   ; ... doesn't exist,
exten => _s20Z1,s,Playback(adacore/has-one-participant) ; ... or has one
exten => _s20Z.,s,Swift(has ${EXTEN:4} participants) ; ... or more.
exten => _s20Z.,n,ExecIf(${CONFBRIDGE_INFO(locked,${EXTEN:1})}?Playback(adacore/and-is-locked)
exten => _s20Z.,n,Goto(210,r)		; Go back for another op.

exten => _j20Z,1,Set(CFN=you-wish-to-join&${C}&digits/zero&digits/${EXTEN:-1}&)
 same => n,Gosub(Is-That-Correct,s,1) ; See if correct.
 same => n,GotoIf($[${GOSUB_RETVAL}=2]?210,r) ; Retry it not.
 same => n,SpeechDestroy		; Else free speech channel.
 same => n,Goto(${EXTEN:-3},1)		; And go there.

exten => _[cC]20Z,1,GotoIf($[CONFBRIDGE_INFO(parties,${EXTEN:1})=0]?s20${EXTEN:-1}0,1)
 same => n,Playback(adacore/participants-in) ; Say header and ...
 same => n,Playback(${C}&digits/${EXTEN:2:1}&digits/${EXTEN:3:1}) ; ... num.
 same => n,ExecIf($[x${G:0:3}=xtmp]?System(rm -f ${GRAMS}/${G}.gram))
 same => n,Set(__G=tmp/r${RAND(10000,99999)})	; Grammar filename part.
 same => n,AGI(conflist.php,${EXTEN:1},${GRAMS}/${G}.gram,${EXTEN:0:1})
 same => n,Goto(210,r)				; And go back.

exten => _m20ZXX.,1,Mset(Q=adacore/unmute,OP=adacore/unmuted)
exten => _M20ZXX.,s,Mset(Q=adacore/mute,OP=adacore/muted)
exten => _k20ZXX.,s,Mset(Q=adacore/remove,OP=removed)
exten => _[Mmk]20ZXX.,n,Playback(adacore/you-want-to&${Q}) ; Begin asking.
 same => n,Swift(${EXTEN:44})	     ; Say who ...
 same => n,Gosub(Is-That-Correct,s,1) ; ... and see if right.
 same => n,GotoIf($[${GOSUB_RETVAL}=2]?210,r) ; Retry it not.
 same => n,Set(U=${IF($[${EXTEN:4:1}=0]?${EXTEN:5:1}:${EXTEN:4:2})})
 same => n,AGI(confbridge_op.php,${EXTEN:1:3},${EXTEN:0:1},${EXTEN:4:40})
 same => n,Swift(${EXTEN:44})	     ; Say name ...
 same => n,Playback(${OP})	     ; ... and what we did.
 same => n,Goto(210,r)				     ; Go back.

exten => What,1,Set(EFN=adacore/confop_what&) ; Say what options are available.
 same => n,Goto(210,r)			; And go back and prompt again.
exten => Done,1,Playback(vm-goodbye)	; Here to hangup.

; This is where people go when calling our main conference facility.
exten => 200,1,Answer(1000)		; Give time to connect.
 same => n,Set(ORIGCID=${CALLERID(num)}) ; Save caller ID.
exten => 200/_19X,n,Gosub(Ask-Ext,s,1) ; If Polycom, ask for extension.
exten => 200/673,s,Gosub(Ask-Ext,s,1)	; If Polycom, ask for extension.
exten => 200,s,NoOp			; Otherwise, do nothing.
 same => n,Set(STATS_INC(conf_sys)=1)	; Count the call.
 same => n,Set(CONFNO=${CID_CONFNO(${CALLERID(num)})}) ; See if invited ...
 same => n,Set(CALLERID(num)=${ORIGCID}) ; ... [restore CID] ...
 same => n,GotoIf($[x${CONFNO}!=x]?p${CONFNO},1) ; ... to conference.
 same => n,GotoIf(${DTMF}?dtmf)		; Use DTMF if requested.
 same => n,Macro(Get-Speech,confno,${EFN}adacore/welcome-cnf-v,4.5,7,200,d)
 same => n,GotoIf(${LEN(${S_T})}?${S_T},1)	; Dispatch result.
 same => n,Set(EFN=adacore/im-sorry-couldnt-understand&) ; Set error.
 same => n,GotoIf($[${SET(REC=$[${REC}--1])}>1]?:1) ; Retry if unrecog.
 same => n(dtmf),Background(${EFN}adacore/welcome-conference) ; Else dtmf.
 same => n,WaitExten(3)			; ...

; Here are nine conference rooms using ConfBridge.
exten => _20Z,1,Answer(1000)			; Answer and delay a bit.
 same => n,GosubIf($[x${AUTH}=x]?Authenticate,s,1(2016)); Authenticate.
 same => n,GosubIf($[x${CALLERID(num)}=x]?Ask-CID,s,1) ; Ask for CID if none.
 same => n,Set(STATS_INC(conf_room)=1)		; Count it.
 same => n,ConfBridge(${EXTEN},,,default_menu)	; Enter the conference.

exten => _vX.,1,ExecIf($[${S_S}<500]?SayDigits(${EXTEN:1})) ; Say what we got.
 same => n,Goto(${EXTEN:1},1)		; And go to it.

; Here if an invalid conference was specified or we had a timeout.
exten => _[ti],1,GotoIf($[${SET(REC=$[${REC}--1])}>3]?999) ; No more retries.
 same => n,Set(EFN=conf-invalid&)		; Else prompt ...
 same => n,Goto(200,1)				; ... again.

; Here to go to a conference, but say we're putting the person there.
exten => _pXXXXXXX,1,Playback(adacore/you-are-being-added)
exten => _p20X,1,Playback(adacore/you-are-being-added&ha/room&digits/2&digits/0&digits/${EXTEN:3})
exten => _pXX.,2,Set(AUTH=OK)			; Show need not authenticate.
 same => n,Goto(${EXTEN:1},1)

; These are conferences scheduled via web-meetme.  We have to test everything
; here, including validity and starting/ending times, and set everything up.
exten => _XXXXXXX,1,Set(B=${CONF_BOOKID(${EXTEN})}) ; Get BookId if any.
 same => n,GotoIf($[x${B}=x]?i,1)	; If no such conf.
 same => n,Set(N=${FILTER(A-Za-z0-9 ,"${B_NAME(${B})}")}) ; Get name.
 same => n,ExecIf(${N}?Swift(${N}))	; Play conf name, if any.
 same => n,Set(PA=${CONFBRIDGE_INFO(parties,${EXTEN})}) ; See if exists.
 same => n,GotoIf($[x${PA}=x||x${PA}=x0]?:ok)	; If so, can enter.
 same => n,ExecIf($[!B_STARTED(${B})]?Playback(adacore/conf-has-not-started))
 same => n,ExecIf($[!B_STARTED(${B})]?Hangup)		; Too early.
 same => n,ExecIf($[B_ENDED(${B})]?Playback(adacore/conf-has-ended))
 same => n,ExecIf($[B_ENDED(${B})]?Hangup)		; Too late.
 same => n(ok),MSet(UPIN=${B_PIN(${B})},APIN=${B_APIN(${B})},MENU=default_menu)
 same => n,GotoIf($[x${UPIN}=x]?donepin)	; Skip if no PIN.
 same => n,GotoIf($[x${PIN}]!=x?gotpin)		; Use external PIN.
 same => n(askpin),Macro(Get-Speech,digit4,adacore/conf-get-pin,3,4,200,w)
 same => n,Set(PIN=${S_T})			; Get PIN that caller input.
 same => n(gotpin),ExecIf($[x${PIN}=x${APIN}]?Set(Admin=1)) ; Admin if match.
 same => n,GotoIf($[x${PIN}=x${UPIN}||x${PIN}=x${APIN}]?donepin) ; If pin OK.
 same => n,GotoIf($[${SET(REP=$[${REP}--1])}>2]?:askpin) ; Else maybe retry.
 same => n,Playback(pin-invalid)		; Otherwise give error.
 same => n,Hangup				; And end the call.

; Here when we're ready to put the call into the bridge.  Set the relevant
; parameters, first conference, then user.
 same => n(donepin),Set(CONFBRIDGE(bridge,template)=conference_bridge)
 same => n,GotoIf(${B_RECORD(${B})}?:norecord)   ; Skip if not recording.
 same => n,Set(CONFBRIDGE(bridge,record_conference)=yes) ; Else set up.
 same => n,Set(CONFBRIDGE(bridge,record_file)=${B_FILE(${B})}.${B_EXT(${B})})
 same => n,Playback(adacore/this-conference-recorded) ; And say so.
 same => n(norecord),GotoIf($[B_MAXUSER(${B})=0]?nomax) ; Skip if no limit.
 same => n,Set(CONFBRIDGE(bridge,max_members)=${B_MAXUSER(${B})})
 same => n(nomax),Set(CONFBRIDGE(user,template)=conference_user)
 same => n,ExecIf(${Admin}?Set(CONFBRIDGE(user,admin)=yes))
 same => n,ExecIf(${Admin}?Set(CONFBRIDGE(user,marked)=yes))
 same => n,ExecIf($[x${Jitter}!=x]?Set(CONFBRIDGE(user,jitterbuffer)=no))
 same => n,ExecIf(${B_ANN(${B})}?Set(CONFBRIDGE(user,announce_join_leave)=yes)
 same => n,ExecIf(${B_CNT(${B})}?Set(CONFBRIDGE(user,announce_user_count)=yes))
 same => n,ExecIf(${B_CNT(${B})}?Set(CONFBRIDGE(user,announce_only_user)=yes))
 same => n,ExecIf(${B_QUIET(${B})}?Set(CONFBRIDGE(user,quiet)=yes))
 same => n,ExecIf(${B_MUTED(${B})}?Set(CONFBRIDGE(user,startmuted)=yes))
exten => _XXXXXXX/_19X,n,Goto(enter)   ; Rest of opts don't apply to ...
exten => _XXXXXXX,s,GotoIf(${Admin}?enter)  ; ... Polycoms or admins.
 same => n,ExecIf(${B_LISTEN(${B})}?Set(CONFBRIDGE(user,startmuted)=yes))
 same => n,ExecIf(${B_LISTEN(${B})}?Set(MENU=silent_menu)) ; Set special menu.
 same => n,ExecIf(${B_MOD(${B})}?Set(CONFBRIDGE(user,startmuted)=yes))
 same => n,ExecIf(${B_MOD(${B})}?Set(MENU=silent_menu)) ; Set special menu.
 same => n,ExecIf(${B_MOD(${B})}?Playback(adacore/moderated)) ; Say moderated.
 same => n,ExecIf(${B_WAIT(${B})}?Set(CONFBRIDGE(user,wait_marked)=yes))
 same => n(enter),Confbridge(${EXTEN},,,${MENU})  ; Now enter conference.

; For hangup, see if we made a grammar file and delete it if so.
exten => h,1,ExecIf($[x${G:0:3}=xtmp]?System(rm -f ${GRAMS}/${G}.gram))

; Here to say the time.  This is meant to be called from the menu.
exten => time,1,SayUnixTime(,,IMp)
 same => n,GotoIf(${B}?:999)			; If no conference, done.
 same => n,Mset(TZ=America/New_York,FMT=%Y-%m-%d %H:%M:%S) ; Set conv parms.
 same => n,Set(ST=${STRPTIME(${B_START(${B})},${TZ},${FMT})}) ; Starting time.
 same => n,SayNumber($[CEIL((${EPOCH}-${ST})/60)])  ; Say duration so ...
 same => n,Playback(minutes&in-the&conference)	    ; ... far in the conf.
 same => n,Set(EN=${STRPTIME(${B_END(${B})},${TZ},${FMT})}) ; Ending time.
 same => n,SayNumber($[CEIL((${EN}-${EPOCH})/60)])  ; Say how much time ...
 same => n,Playback(adacore/minutes-remaining)      ; ... left in the conf.

exten => hand,1,Set(C=${CHANNEL(name)})		; Get channel name.
 same => n,GotoIf(${B}?:999)			; Done if not in ...
 same => n,GotoIf(${B_MOD(${B})}?:999)		; ... moderated conference.
 same => n,Execif($[x${HAND_RAISE(${C})}=x]?Set(HAND_ENTER()=${C}))
 same => n,Set(HAND_RAISE()=${C})	    	; Toggle status.
 same => n,Playback(adacore/${IF(${HAND_RAISE(${C})}?raised:hand_down)})

; This context is used when call files put somebody into a conference room.
[Call_Conferences]
exten => _X.,1,Answer(1000)			; Wait a bit.
 same => 2,Mset(CALLERID(num)=${CID},CALLERID(name)=${CNAM}) ; Set CID to use.
exten => _X.,3,Read(DIG,adacore/this-is-adacore-conf&adacore/dial-one,1,s,1,2)
 same => n,ExecIf($["x${DIG}"="x*"]?Read(DIG,,1,1,2)) ; If *, get next.
 same => n,GotoIf($[x${DIG}!=x1]?error)		; Error if didn't dial 1.
 same => n,Set(STATS_INC(conf_co_ok)=1)		; Count success.
 same => n,Goto(Conferences,p${EXTEN},1)	; And go there.
 same => n(error),GotoIf($[${SET(RED=$[${RED}--1])}<3]?3) Else maybe retry.

[Conf_Warn]
; This context is used to warn a conference that it's about to end.
exten => s,1,Wait(5)			; Wait until we're in the conference.
 same => n,Goto(${WTIME},1)		; Then decide what to say.

exten => 0,1,Playback(confbridge-conf-end)  ; Say conference has ended.
exten => 1,1,Playback(adacore/conf-will-end-in&digits/${WTIME}&minute)
exten => _[2-9],1,Playback(adacore/conf-will-end-in&digits/${WTIME}&minutes)

; This context is used via the Local channel to make an outgoing call to
; invite somebody to a conference.
[Conf_Invite]
exten => _[+0-9a-zA-Z].,1,Set(STATS_INC(conf_co)=1) ; Count the event.
 same => n,Goto(Dispatch,${EXTEN},1)		    ; Make it happen.

; This context is used once we make the call to the phone used to make an
; outgoing call.  It actually makes that call.
[Make_Outcall]
exten => _[+0-9a-zA-Z].,1,Answer(700)		; Wait a bit.
 same => n,Swift(Calling ${CALLERID(name):5})		; Say we're calling.
 same => n,MSet(CALLERID(num)=${CNUM},CALLERID(name)=${CNAM}) ; Set CID.
 same => n,Goto(Dispatch,${EXTEN},1)		; And call.
